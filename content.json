{"pages":[{"title":"About Cuws","text":"Intro.안녕하세요.","link":"/about/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"},{"title":"all-categories","text":"","link":"/all-categories/index.html"}],"posts":[{"title":"[CodeSignal] #1 add","text":"DescriptionWrite a function that returns the sum of two numbers. ExampleFor param1 = 1 and param2 = 2, the output should be add(param1, param2) = 3. Input/Output [execution time limit] 4 seconds (py3) [input] integer param1 Guaranteed constraints : -1000 ≤ param1 ≤ 1000. [input] integer param2 Guaranteed constraints : -1000 ≤ param2 ≤ 1000. [output] integer The sum of the two inputs. Solution12def add(param1, param2): return param1 + param2","link":"/2020/02/28/CodeSignal-1-add/"},{"title":"[CodeSignal] #10 commonCharacterCount","text":"DescriptionGiven two strings, find the number of common characters between them. ExampleFor s1 = &quot;aabcc&quot; and s2 = &quot;adcaa&quot;, the output should be commonCharacterCount(s1, s2) = 3. Strings have 3 common characters - 2 “a”s and 1 “c”. Input/Output [execution time limit] 4 seconds (py3) [input] string s1 A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ s1.length &lt; 15. [input] string s2 A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ s2.length &lt; 15. [output] integer Solution123456789101112def commonCharacterCount(s1, s2): check1 = [0 for _ in range(26)] check2 = [0 for _ in range(26)] for i in s1: check1[ord(i) - ord('a')] += 1 for i in s2: check2[ord(i) - ord('a')] += 1 answer = 0 for i, j in zip(check1, check2): if i != 0 and j != 0: answer += min(i, j) return answer","link":"/2020/03/05/CodeSignal-10-commonCharacterCount/"},{"title":"[CodeSignal] #11 isLucky","text":"DescriptionTicket numbers usually consist of an even number of digits. A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half. Given a ticket number n, determine if it’s lucky or not. Example For n = 1230, the output should be isLucky(n) = true; For n = 239017, the output should be isLucky(n) = false. Input/Output [execution time limit] 4 seconds (py3) [input] integer n A ticket number represented as a positive integer with an even number of digits. Guaranteed constraints : 10 ≤ n &lt; 106. [output] boolean true if n is a lucky ticket number, false otherwise. Solution12345678def isLucky(n): n = str(n) result1 = result2 = 0 for i in n[:len(n)//2]: result1 += int(i) for i in n[len(n)//2:]: result2 += int(i) return result1 == result2","link":"/2020/03/07/CodeSignal-11-isLucky/"},{"title":"[CodeSignal] #13 reverseInParentheses","text":"DescriptionWrite a function that reverses characters in (possibly nested) parentheses in the input string. Input strings will always be well-formed with matching ()s. Example For inputString = &quot;(bar)&quot;, the output should be reverseInParentheses(inputString) = &quot;rab&quot;; For inputString = &quot;foo(bar)baz&quot;, the output should be reverseInParentheses(inputString) = &quot;foorabbaz&quot;; For inputString = &quot;foo(bar)baz(blim)&quot;, the output should be reverseInParentheses(inputString) = &quot;foorabbazmilb&quot;; For inputString = &quot;foo(bar(baz))blim&quot;, the output should be reverseInParentheses(inputString) = &quot;foobazrabblim&quot;. Because &quot;foo(bar(baz))blim&quot; becomes &quot;foo(barzab)blim&quot; and then &quot;foobazrabblim&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string consisting of lowercase English letters and the characters ( and ). It is guaranteed that all parentheses in inputString form a regular bracket sequence1. Guaranteed constraints : 0 ≤ inputString.length ≤ 50. [output] string Return inputString, with all the characters that were in parentheses reversed. Solution1234567891011121314def reverseInParentheses(inputString): result = [] for i in inputString: if i != ')': result.append(i) else: temp = [] while result[-1] != '(': temp.append(result[-1]) result.pop(-1) result.pop(-1) for j in temp: result.append(j) return ''.join(result) 1. A bracket sequence is called regular if it is possible to insert some numbers and signs into the sequence in such a way that the new sequence will represent a correct arithmetic expression.","link":"/2020/03/07/CodeSignal-13-reverseInParentheses/"},{"title":"[CodeSignal] #12 sortByHeight","text":"DescriptionSome people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall! ExampleFor a = [-1, 150, 190, 170, -1, -1, 160, 180], the output should be sortByHeight(a) = [-1, 150, 160, 170, -1, -1, 180, 190]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position. Guaranteed constraints : 1 ≤ a.length ≤ 1000, -1 ≤ a[i] ≤ 1000. [output] array.integer Sorted array a with all the trees untouched. Solution1234567891011121314151617def sortByHeight(a): arr = [] tree = [] for i in range(len(a)): if a[i] == -1: tree.append(i) else: arr.append(a[i]) arr.sort() result = [] for i in range(len(a)): if i in tree: result.append(-1) else: result.append(arr[0]) arr.pop(0) return result","link":"/2020/03/07/CodeSignal-12-sortByHeight/"},{"title":"[CodeSignal] #14 alternatingSums","text":"DescriptionSeveral people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on. You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete. ExampleFor a = [50, 60, 60, 45, 70], the output should be alternatingSums(a) = [180, 105]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a Guaranteed constraints : 1 ≤ a.length ≤ 105, 45 ≤ a[i] ≤ 100. [output] array.integer Solution12345678def alternatingSums(a): result = [0, 0] for i in range(len(a)): if i % 2 == 0: result[0] += a[i] else: result[1] += a[i] return result","link":"/2020/03/07/CodeSignal-14-alternatingSums/"},{"title":"[CodeSignal] #15 Add Border","text":"DescriptionGiven a rectangular matrix of characters, add a border of asterisks(*) to it. ExampleFor 12picture = [&quot;abc&quot;, &quot;ded&quot;] the output should be 1234addBorder(picture) = [&quot;*****&quot;, &quot;*abc*&quot;, &quot;*ded*&quot;, &quot;*****&quot;] Input/Output [execution time limit] 4 seconds (py3) [input] array.string picture A non-empty array of non-empty equal-length strings. Guaranteed constraints : 1 ≤ picture.length ≤ 100, 1 ≤ picture[i].length ≤ 100. [output] array.string The same matrix of characters, framed with a border of asterisks of width 1. Solution123456789def addBorder(picture): result = [] for i in range(len(picture) + 2): if i == 0 or i == len(picture) + 1: temp = '*' * (len(picture[0]) + 2) result.append(temp) else: result.append('*' + picture[i-1] + '*') return result","link":"/2020/03/08/CodeSignal-15-Add-Border/"},{"title":"[CodeSignal] #16 Are Similar?","text":"DescriptionTwo arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays. Given two arrays a and b, check whether they are similar. Example For a = [1, 2, 3] and b = [1, 2, 3], the output should be areSimilar(a, b) = true. The arrays are equal, no need to swap any elements. For a = [1, 2, 3] and b = [2, 1, 3], the output should be areSimilar(a, b) = true. We can obtain b from a by swapping 2 and 1 in b. For a = [1, 2, 2] and b = [2, 1, 1], the output should be areSimilar(a, b) = false. Any swap of any two elements either in a or in b won’t make a and b equal. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a Array of integers. Guaranteed constraints : 3 ≤ a.length ≤ 105, 1 ≤ a[i] ≤ 1000. [input] array.integer b Array of integers of the same length as a. Guaranteed constraints : b.length = a.length, 1 ≤ b[i] ≤ 1000. [output] boolean true if a and b are similar, false otherwise. Solution12345678910def areSimilar(a, b): if sorted(a) != sorted(b): return False flag = 0 for i, j in zip(a, b): if i != j: flag += 1 if flag &gt; 2: return False return True","link":"/2020/03/08/CodeSignal-16-Are-Similar/"},{"title":"[CodeSignal] #17 arrayChange","text":"DescriptionYou are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input. ExampleFor inputArray = [1, 1, 1], the output should be arrayChange(inputArray) = 3. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Guaranteed constraints : 3 ≤ inputArray.length ≤ 105, -105 ≤ inputArray[i] ≤ 105. [output] integer The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.It’s guaranteed that for the given test cases the answer always fits signed 32-bit integer type. Solution12345678def arrayChange(inputArray): answer = 0 for i in range(1, len(inputArray)): if inputArray[i] &lt;= inputArray[i-1]: temp = inputArray[i] inputArray[i] += abs(inputArray[i-1] - inputArray[i]) + 1 answer += abs(inputArray[i] - temp) return answer","link":"/2020/03/08/CodeSignal-17-arrayChange/"},{"title":"[CodeSignal] #18 palindromeRearranging","text":"DescriptionGiven a string, find out if its characters can be rearranged to form a palindrome1. ExampleFor inputString = &quot;aabb&quot;, the output should be palindromeRearranging(inputString) = true. We can rearrange &quot;aabb&quot; to make &quot;abba&quot;, which is a palindrome. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ inputString.length ≤ 50. [output] boolean true if the characters of the inputString can be rearranged to form a palindrome, false otherwise. Solution1234567891011121314151617181920212223def palindromeRearranging(inputString): check = [0 for _ in range(26)] for i in inputString: check[ord(i) - ord('a')] += 1 if len(inputString) % 2 == 0: flag = False for j in check: if j % 2 == 1: flag = True break if flag: return False else: return True else: cnt = 0 for j in check: if j % 2 == 1: cnt += 1 if cnt &gt; 2: return False else: return True 1. A palindrome is a string that reads the same left-to-right and right-to-left.","link":"/2020/03/08/CodeSignal-18-palindromeRearranging/"},{"title":"[CodeSignal] #19 areEquallyStrong","text":"DescriptionCall two arms equally strong if the heaviest weights they each are able to lift are equal. Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms. Given your and your friend’s arms’ lifting capabilities find out if you two are equally strong. Example For yourLeft = 10, yourRight = 15, friendsLeft = 15, and friendsRight = 10, the output should be areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = true; For yourLeft = 15, yourRight = 10, friendsLeft = 15, and friendsRight = 10, the output should be areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = true; For yourLeft = 15, yourRight = 10, friendsLeft = 15, and friendsRight = 9, the output should be areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight) = false. Input/Output [execution time limit] 4 seconds (py3) [input] integer yourLeft A non-negative integer representing the heaviest weight you can lift with your left arm. Guaranteed constraints : 0 ≤ yourLeft ≤ 20. [input] integer yourRight A non-negative integer representing the heaviest weight you can lift with your right arm. Guaranteed constraints : 0 ≤ yourRight ≤ 20. [input] integer friendsLeft A non-negative integer representing the heaviest weight your friend can lift with his or her left arm. Guaranteed constraints : 0 ≤ friendsLeft ≤ 20. [input] integer friendsRight A non-negative integer representing the heaviest weight your friend can lift with his or her right arm. Guaranteed constraints : 0 ≤ friendsRight ≤ 20. [output] boolean true if you and your friend are equally strong, false otherwise. Solution12345def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight): if min(yourLeft, yourRight) == min(friendsLeft, friendsRight) and max(yourLeft, yourRight) == max(friendsLeft, friendsRight): return True else: return False","link":"/2020/03/09/CodeSignal-19-areEquallyStrong/"},{"title":"[CodeSignal] #20 arrayMaximalAdjacentDifference","text":"DescriptionGiven an array of integers, find the maximal absolute difference between any two of its adjacent elements. ExampleFor inputArray = [2, 4, 1, 0], the output should be arrayMaximalAdjacentDifference(inputArray) = 3. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Guaranteed constraints : 3 ≤ inputArray.length ≤ 10, -15 ≤ inputArray[i] ≤ 15. [output] integer The maximal absolute difference. Solution12345def arrayMaximalAdjacentDifference(inputArray): result = 0 for i in range(1, len(inputArray)): result = max(result, abs(inputArray[i] - inputArray[i-1])) return result","link":"/2020/03/09/CodeSignal-20-arrayMaximalAdjacentDifference/"},{"title":"[CodeSignal] #21 isIPv4Address","text":"DescriptionAn IP address is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication. There are two versions of the Internet protocol, and thus two versions of addresses. One of them is the IPv4 address1. Given a string, find out if it satisfies the IPv4 address naming rules. Example For inputString = &quot;172.16.254.1&quot;, the output should be isIPv4Address(inputString) = true; For inputString = &quot;172.316.254.1&quot;, the output should be isIPv4Address(inputString) = false. 316 is not in range [0, 255]. For inputString = &quot;.254.255.0&quot;, the output should be isIPv4Address(inputString) = false. There is no first number. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string consisting of digits, full stops and lowercase English letters. Guaranteed constraints : 1 ≤ inputString.length ≤ 30. [output] boolean true if inputString satisfies the IPv4 address naming rules, false otherwise. Solution123456789101112131415def isIPv4Address(inputString): if inputString.count('.') != 3: return False arr = list(inputString.split('.')) if len(arr) != 4: return False for i in arr: if i == '': return False elif i.isdigit(): if 0 &gt; int(i) or int(i) &gt; 255: return False else: return False return True 1. IPv4 address is a string with the following structure: a.b.c.d, where a, b, c and d are integers in range [0, 255]. For example, 0.0.0.0, 255.255.255.255 or 252.0.128.32 are correct IPv4 addresses, and 0.0.0.256, -1.1.1.1, 0.0.0.0.0 are incorrect. a.b is named network part and c.d is named host part.","link":"/2020/03/09/CodeSignal-21-isIPv4Address/"},{"title":"[CodeSignal] #2 centuryFromYear","text":"DescriptionGiven a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc. Example For year = 1905, the output should be centuryFromYear(year) = 20; For year = 1700, the output should be centuryFromYear(year) = 17. Input/Output [execution time limit] 4 seconds (py3) [input] integer year A positive integer, designating the year. Guaranteed constraints : 1 ≤ year ≤ 2005. [output] integer The number of the century the year is in. Solution123import mathdef centuryFromYear(year): return math.ceil(year / 100)","link":"/2020/02/28/CodeSignal-2-centuryFromYear/"},{"title":"[CodeSignal] #22 avoidObstacles","text":"DescriptionYou are given an array of integers representing coordinates of obstacles situated on a straight line. Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer. Find the minimal length of the jump enough to avoid all the obstacles. ExampleFor inputArray = [5, 3, 6, 7, 9], the output should be avoidObstacles(inputArray) = 4. Check out the image below for better understanding: Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Non-empty array of positive integers. Guaranteed constraints : 2 ≤ inputArray.length ≤ 1000, 1 ≤ inputArray[i] ≤ 1000. [output] integer The desired length. Solution12345678910111213def avoidObstacles(inputArray): inputArray = set(sorted(inputArray)) temp = set([i for i in range(1, max(inputArray)+1)]) result = sorted(temp - inputArray) for i in result: flag = True for j in inputArray: if j % i == 0: flag = False break if flag: return i return max(inputArray) + 1","link":"/2020/03/09/CodeSignal-22-avoidObstacles/"},{"title":"[CodeSignal] #23 Box Blur","text":"DescriptionLast night you partied a little too hard. Now there’s a black and white photo of you that’s about to go viral! You can’t let this ruin your reputation, so you want to apply the box blur algorithm1 to the photo to hide its content. The pixels in the input image are represented as integers. The algorithm distorts the input image in the following way: Every pixel x in the output image has a value equal to the average value of the pixel values from the 3 × 3 square that has its center at x, including x itself. All the pixels on the border of x are then removed. Return the blurred image as an integer, with the fractions rounded down. ExampleFor 123image = [[1, 1, 1], [1, 7, 1], [1, 1, 1]] the output should be boxBlur(image) = [[1]]. To get the value of the middle pixel in the input 3 × 3 square: (1 + 1 + 1 + 1 + 7 + 1 + 1 + 1 + 1) = 15 / 9 = 1.66666 = 1. The border pixels are cropped from the final result. For 1234image = [[7, 4, 0, 1], [5, 6, 2, 2], [6, 10, 7, 8], [1, 4, 2, 0]] the output should be 12boxBlur(image) = [[5, 4], [4, 4]] There are four 3 × 3 squares in the input image, so there should be four integers in the blurred output. To get the first value: (7 + 4 + 0 + 5 + 6 + 2 + 6 + 10 + 7) = 47 / 9 = 5.2222 = 5. The other three integers are obtained the same way, then the surrounding integers are cropped from the final result. Input/Output [execution time limit] 4 seconds (py3) [input] array.array.integer image An image, stored as a rectangular matrix of non-negative integers. Guaranteed constraints : 3 ≤ image.length ≤ 100, 3 ≤ image[0].length ≤ 100, 0 ≤ image[i][j] ≤ 255. [output] array.array.integer A blurred image represented as integers, obtained through the process in the description. Solution12345678910def boxBlur(image): result = [] for i in range(1, len(image)-1): temp = [] s = 0 for j in range(1, len(image[0])-1): s = image[i][j] + image[i-1][j-1] + image[i][j-1] + image[i-1][j] + image[i+1][j] + image[i][j+1] + image[i-1][j+1] + image[i+1][j-1] + image[i+1][j+1] temp.append(s//9) result.append(temp) return result","link":"/2020/03/09/CodeSignal-23-Box-Blur/"},{"title":"[CodeSignal] #24 Minesweeper","text":"DescriptionIn the popular Minesweeper game you have a board with some mines and those cells that don’t contain a mine have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup. ExampleFor 123matrix = [[true, false, false], [false, true, false], [false, false, false]] the output should be 123minesweeper(matrix) = [[1, 2, 1], [2, 1, 1], [1, 1, 1]] Check out the image below for better understanding: Input/Output [execution time limit] 4 seconds (py3) [input] array.array.boolean matrix A non-empty rectangular matrix consisting of boolean values - true if the corresponding cell contains a mine, false otherwise. Guaranteed constraints : 2 ≤ matrix.length ≤ 100, 2 ≤ matrix[0].length ≤ 100. [output] array.array.integer Rectangular matrix of the same size as matrix each cell of which contains an integer equal to the number of mines in the neighboring cells. Two cells are called neighboring if they share at least one corner. Solution1234567891011121314151617dx = [-1, -1, -1, 0, +1, +1, +1, 0]dy = [-1, 0, +1, +1, +1, 0, -1, -1]def minesweeper(matrix): result = [] for i in range(len(matrix)): temp = [] for j in range(len(matrix[0])): s = 0 for k in range(8): nx = i + dx[k] ny = j + dy[k] if 0 &lt;= nx &lt; len(matrix) and 0 &lt;= ny &lt; len(matrix[0]): if matrix[nx][ny]: s += 1 temp.append(s) result.append(temp) return result","link":"/2020/03/09/CodeSignal-24-Minesweeper/"},{"title":"[CodeSignal] #25 Array Replace","text":"DescriptionGiven an array of integers, replace all the occurrences of elemToReplace with substitutionElem. ExampleFor inputArray = [1, 2, 1], elemToReplace = 1, and substitutionElem = 3, the output should be arrayReplace(inputArray, elemToReplace, substitutionElem) = [3, 2, 3]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Guaranteed constraints : 0 ≤ inputArray.length ≤ 104, 0 ≤ inputArray[i] ≤ 109. [input] integer elemToReplace Guaranteed constraints : 0 ≤ elemToReplace ≤ 109. [input] integer substitutionElem Guaranteed constraints : 0 ≤ substitutionElem ≤ 109. [output] array.integer Solution12345def arrayReplace(inputArray, elemToReplace, substitutionElem): for i in range(len(inputArray)): if inputArray[i] == elemToReplace: inputArray[i] = substitutionElem return inputArray","link":"/2020/03/09/CodeSignal-25-Array-Replace/"},{"title":"[CodeSignal] #27 variableName","text":"DescriptionCorrect variable names consist only of English letters, digits and underscores and they can’t start with a digit. Check if the given string is a correct variable name. Example For name = &quot;var_1__Int&quot;, the output should be variableName(name) = true; For name = &quot;qq-q&quot;, the output should be variableName(name) = false; For name = &quot;2w2&quot;, the output should be variableName(name) = false. Input/Output [execution time limit] 4 seconds (py3) [input] string name Guaranteed constraints : 1 ≤ name.length ≤ 10. [output] boolean true if name is a correct variable name, false otherwise. Solution12345678910111213def variableName(name): if '0' &lt;= name[0] &lt;= '9': return False for i in name: if '0' &lt;= i &lt;= '9': continue elif i == '_': continue elif 'a' &lt;= i &lt;= 'z' or 'A' &lt;= i &lt;= 'Z': continue else: return False return True","link":"/2020/03/09/CodeSignal-27-variableName/"},{"title":"[CodeSignal] #26 evenDigitsOnly","text":"DescriptionCheck if all digits of the given integer are even. Example For n = 248622, the output should be evenDigitsOnly(n) = true; For n = 642386, the output should be evenDigitsOnly(n) = false. Input/Output [execution time limit] 4 seconds (py3) [input] integer n Guaranteed constraints : 0 ≤ inputArray.length ≤ 104, 0 ≤ n ≤ 109. [output] boolean true if all digits of n are even, false otherwise. Solution12345def evenDigitsOnly(n): for i in str(n): if int(i) % 2 == 1: return False return True","link":"/2020/03/09/CodeSignal-26-evenDigitsOnly/"},{"title":"[CodeSignal] #3 checkPalindrome","text":"DescriptionGiven the string, check if it is a palindrome1. Example For inputString = &quot;aabaa&quot;, the output should be checkPalindrome(inputString) = true; For inputString = &quot;abac&quot;, the output should be checkPalindrome(inputString) = false; For inputString = &quot;a&quot;, the output should be checkPalindrome(inputString) = true. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A non-empty string consisting of lowercase characters. Guaranteed constraints : 1 ≤ inputString.length ≤ 105. [output] boolean true if inputString is palindrome, false otherwise. Solution12def checkPalindrome(inputString): return inputString == inputString[::-1] #[::-1]은 문자열을 뒤집어 준다. 1. A palindrome is a string that reads the same left-to-right and right-to-left.","link":"/2020/02/28/CodeSignal-3-checkPalindrome/"},{"title":"[CodeSignal] #29 chessBoardCellColor","text":"DescriptionGiven two cells on the standard chess board, determine whether they have the same color or not. Example For cell1 = &quot;A1&quot; and cell2 = &quot;C3&quot;, the output should be chessBoardCellColor(cell1, cell2) = true. For cell1 = &quot;A1&quot; and cell2 = &quot;H3&quot;, the output should be chessBoardCellColor(cell1, cell2) = false. Input/Output [execution time limit] 4 seconds (py3) [input] string cell1 Guaranteed constraints : cell1.length = 2, 'A' ≤ cell1[0] ≤ 'H', 1 ≤ cell1[1] ≤ 8. [input] string cell2 Guaranteed constraints : cell2.length = 2, 'A' ≤ cell2[0] ≤ 'H', 1 ≤ cell2[1] ≤ 8. [output] boolean true if both cells have the same color, false otherwise. Solution1234567891011def chessBoardCellColor(cell1, cell2): if (ord(cell1[0]) - ord('A')) % 2 == (ord(cell2[0]) - ord('A')) % 2: if int(cell1[1]) % 2 == int(cell2[1]) % 2: return True else: return False else: if int(cell1[1]) % 2 != int(cell2[1]) % 2: return True else: return False","link":"/2020/03/09/CodeSignal-29-chessBoardCellColor/"},{"title":"[CodeSignal] #28 alphabeticShift","text":"DescriptionGiven a string, your task is to replace each of its characters by the next one in the English alphabet; i.e. replace a with b, replace b with c, etc (z would be replaced by a). ExampleFor inputString = &quot;crazy&quot;, the output should be alphabeticShift(inputString) = &quot;dsbaz&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A non-empty string consisting of lowercase English characters. Guaranteed constraints : 1 ≤ inputString.length ≤ 1000. [output] string The resulting string after replacing each of its characters. Solution12345def alphabeticShift(inputString): result = '' for i in inputString: result += chr(((ord(i) - ord('a') + 1) % 26) + ord('a')) return result","link":"/2020/03/09/CodeSignal-28-alphabeticShift/"},{"title":"[CodeSignal] #4 adjacentElementsProduct","text":"DescriptionGiven an array of integers, find the pair of adjacent elements that has the largest product and return that product. ExampleFor inputArray = [3, 6, -2, -5, 7, 3], the output should be adjacentElementsProduct(inputArray) = 21. 7 and 3 produce the largest product. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray An array of integers containing at least two elements. Guaranteed constraints : 2 ≤ inputArray.length ≤ 10, -1000 ≤ inputArray[i] ≤ 1000. [output] integer The largest product of adjacent elements. Solution123456def adjacentElementsProduct(inputArray): m = -2222 for i in range(1, len(inputArray)): if m &lt; inputArray[i-1] * inputArray[i]: m = inputArray[i-1] * inputArray[i] return m","link":"/2020/03/02/CodeSignal-4-adjacentElementsProduct/"},{"title":"[CodeSignal] #30 Circle of Numbers","text":"DescriptionConsider integer numbers from 0 to n - 1 written down along the circle in such a way that the distance between any two neighboring numbers is equal (note that 0 and n - 1 are neighboring, too). Given n and firstNumber, find the number which is written in the radially opposite position to firstNumber. ExampleFor n = 10 and firstNumber = 2, the output should be circleOfNumbers(n, firstNumber) = 7. Input/Output [execution time limit] 4 seconds (py3) [input] integer n A positive even integer. Guaranteed constraints : 4 ≤ n ≤ 20. [input] integer firstNumber Guaranteed constraints : 0 ≤ firstNumber ≤ n - 1. [output] integer Solution12def circleOfNumbers(n, firstNumber): return (firstNumber + (n // 2)) % n","link":"/2020/03/09/CodeSignal-30-Circle-of-Numbers/"},{"title":"[CodeSignal] #6 Make Array Consecutive 2","text":"DescriptionRatiorg got statues of different sizes as a present from CodeMaster for his birthday, each statue having an non-negative integer size. Since he likes to make things perfect, he wants to arrange them from smallest to largest so that each statue will be bigger than the previous one exactly by 1. He may need some additional statues to be able to accomplish that. Help him figure out the minimum number of additional statues needed. ExampleFor statues = [6, 2, 3, 8], the output should be makeArrayConsecutive2(statues) = 3. Ratiorg needs statues of sizes 4, 5 and 7. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer statues An array of distinct non-negative integers. Guaranteed constraints : 1 ≤ statues.length ≤ 10, 0 ≤ statues[i] ≤ 20. [output] integer The minimal number of statues that need to be added to existing statues such that it contains every integer size from an interval [L, R] (for some L, R) and no other sizes. Solution12345678910def makeArrayConsecutive2(statues): statues.sort() check = [0 for _ in range(statues[-1]+1)] for i in statues: check[i] = 1 answer = 0 for i in range(statues[0], statues[-1]+1): if check[i] != 1: answer += 1 return answer","link":"/2020/03/03/CodeSignal-6-Make-Array-Consecutive-2/"},{"title":"[CodeSignal] #5 shapeArea","text":"DescriptionBelow we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n. A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below. ExampleFor n = 2, the output should be shapeArea(n) = 5. For n = 3, the output should be shapeArea(n) = 13. Input/Output [execution time limit] 4 seconds (py3) [input] integer n Guaranteed constraints : 1 ≤ n &lt; 104. [output] integer The area of the n-interesting polygon. Solution123456def shapeArea(n): result = 1 add = 4 for i in range(1, n): result += add * i return result","link":"/2020/03/02/CodeSignal-5-shapeArea/"},{"title":"[CodeSignal] #7 almostIncreasingSequence","text":"DescriptionGiven a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array. Note: sequence a0, a1, …, an is considered to be a strictly increasing if a0 &lt; a1 &lt; … &lt; an. Sequence containing only one element is also considered to be strictly increasing. ExampleFor sequence = [1, 3, 2, 1], the output should be almostIncreasingSequence(sequence) = false. There is no one element in this array that can be removed in order to get a strictly increasing sequence. For sequence = [1, 3, 2], the output should be almostIncreasingSequence(sequence) = true. You can remove 3 from the array to get the strictly increasing sequence [1, 2]. Alternately, you can remove 2 to get the strictly increasing sequence [1, 3]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer sequence Guaranteed constraints : 2 ≤ sequence.length ≤ 105, -105 ≤ sequence[i] ≤ 105. [output] boolean Return true if it is possible to remove one element from the array in order to get a strictly increasing sequence, otherwise return false. Solution123456789101112def almostIncreasingSequence(sequence): ans = 0 for i in range(len(sequence) - 1): if sequence[i] &gt;= sequence[i + 1]: ans += 1 if i &gt;= 1 and sequence[i + 1] &lt;= sequence[i - 1]: if len(sequence) - 2 &gt; i and sequence[i] &gt;= sequence[i + 2]: ans += 1 if ans &gt; 1: return False else: return True","link":"/2020/03/03/CodeSignal-7-almostIncreasingSequence/"},{"title":"[CodeSignal] #8 matrixElementsSum","text":"DescriptionAfter becoming famous, the CodeBots decided to move into a new building together. Each of the rooms has a different cost, and some of them are free, but there’s a rumour that all the free rooms are haunted! Since the CodeBots are quite superstitious, they refuse to stay in any of the free rooms, or any of the rooms below any of the free rooms. Given matrix, a rectangular matrix of integers, where each value represents the cost of the room, your task is to return the total sum of all rooms that are suitable for the CodeBots (ie: add up all the values that don’t appear below a 0). Example For matrix = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]] the output should be matrixElementsSum(matrix) = 9. There are several haunted rooms, so we’ll disregard them as well as any rooms beneath them. Thus, the answer is 1 + 5 + 1 + 2 = 9. For matrix = [[1, 1, 1, 0], [0, 5, 0, 1], [2, 1, 3, 10]] the output should be matrixElementsSum(matrix) = 9. Note that the free room in the final column makes the full column unsuitable for bots (not just the room directly beneath it). Thus, the answer is 1 + 1 + 1 + 5 + 1 = 9. Input/Output [execution time limit] 4 seconds (py3) [input] array.array.integer matrix A 2-dimensional array of integers representing the cost of each room in the building. A value of 0 indicates that the room is haunted. Guaranteed constraints : 1 ≤ matrix.length ≤ 5, 1 ≤ matrix[i].length ≤ 5, 0 ≤ matrix[i][j] ≤ 10. [output] integer The total price of all the rooms that are suitable for the CodeBots to live in. Solution123456789def matrixElementsSum(matrix): answer = 0 for i in range(len(matrix[0])): for j in range(len(matrix)): if matrix[j][i] == 0: break else: answer += matrix[j][i] return answer","link":"/2020/03/05/CodeSignal-8-matrixElementsSum/"},{"title":"[CodeSignal] #9 All Longest Strings","text":"DescriptionGiven an array of strings, return another array containing all of its longest strings. ExampleFor inputArray = [&quot;aba&quot;, &quot;aa&quot;, &quot;ad&quot;, &quot;vcd&quot;, &quot;aba&quot;], the output should be allLongestStrings(inputArray) = [&quot;aba&quot;, &quot;vcd&quot;, &quot;aba&quot;]. Input/Output [execution time limit] 4 seconds (py3) [input] array.string inputArray A non-empty array. Guaranteed constraints : 1 ≤ inputArray.length ≤ 10, 1 ≤ inputArray[i].length ≤ 10. [output] array.string Array of the longest strings, stored in the same order as in the inputArray. Solution12345678910def allLongestStrings(inputArray): temp = [] for i in inputArray: temp.append(i) temp.sort(key=lambda x:len(x), reverse=True) result = [] for i in inputArray: if len(i) == len(temp[0]): result.append(i) return result","link":"/2020/03/05/CodeSignal-9-All-Longest-Strings/"},{"title":"[CodeSignal] #31 depositProfit","text":"DescriptionYou have deposited a specific amount of money into your bank account. Each year your balance increases at the same growth rate. With the assumption that you don’t make any additional deposits, find out how long it would take for your balance to pass a specific threshold. ExampleFor deposit = 100, rate = 20, and threshold = 170, the output should be depositProfit(deposit, rate, threshold) = 3. Each year the amount of money in your account increases by 20%. So throughout the years, your balance would be: year 0: 100; year 1: 120; year 2: 144; year 3: 172.8. Thus, it will take 3 years for your balance to pass the threshold, so the answer is 3. Input/Output [execution time limit] 4 seconds (py3) [input] integer deposit The initial deposit, guaranteed to be a positive integer. Guaranteed constraints : 1 ≤ deposit ≤ 100. [input] integer rate The rate of increase. Each year the balance increases by the rate percent of the current sum. Guaranteed constraints : 1 ≤ rate ≤ 100. [input] integer threshold The target balance. Guaranteed constraints : deposit &lt; threshold ≤ 200. [output] integer The number of years it would take to hit the threshold. Solution123456def depositProfit(deposit, rate, threshold): cnt = 0 while deposit &lt; threshold: deposit += deposit * (rate / 100) cnt += 1 return cnt","link":"/2020/03/09/CodeSignal-31-depositProfit/"},{"title":"[CodeSignal] #32 absoluteValuesSumMinimization","text":"DescriptionGiven a sorted array of integers a, your task is to determine which element of a is closest to all other values of a. In other words, find the element x in a, which minimizes the following sum: 1abs(a[0] - x) + abs(a[1] - x) + ... + abs(a[a.length - 1] - x) (where abs denotes the absolute value) If there are several possible answers, output the smallest one. Example For a = [2, 4, 7], the output should be absoluteValuesSumMinimization(a) = 4. for x = 2, the value will be abs(2 - 2) + abs(4 - 2) + abs(7 - 2) = 7. for x = 4, the value will be abs(2 - 4) + abs(4 - 4) + abs(7 - 4) = 5. for x = 7, the value will be abs(2 - 7) + abs(4 - 7) + abs(7 - 7) = 8. The lowest possible value is when x = 4, so the answer is 4. For a = [2, 3], the output should be absoluteValuesSumMinimization(a) = 2. for x = 2, the value will be abs(2 - 2) + abs(3 - 2) = 1. for x = 3, the value will be abs(2 - 3) + abs(3 - 3) = 1. Because there is a tie, the smallest x between x = 2 and x = 3 is the answer. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a A non-empty array of integers, sorted in ascending order. Guaranteed constraints : 1 ≤ a.length ≤ 1000, -106 ≤ a[i] ≤ 106. [output] integer An integer representing the element from a that minimizes the sum of its absolute differences with all other elements. Solution1234567891011def absoluteValuesSumMinimization(a): cursor = 987654321 result = 0 for i in range(len(a)): temp = 0 for j in range(len(a)): temp += abs(a[i] - a[j]) if cursor &gt; temp: result = a[i] cursor = temp return result","link":"/2020/03/09/CodeSignal-32-absoluteValuesSumMinimization/"},{"title":"[CodeSignal] #33 stringsRearrangement","text":"DescriptionGiven an array of equal-length strings, you’d like to know if it’s possible to rearrange the order of the elements in such a way that each consecutive pair of strings differ by exactly one character. Return true if it’s possible, and false if not. Note: You’re only rearranging the order of the strings, not the order of the letters within the strings! Example For inputArray = [&quot;aba&quot;, &quot;bbb&quot;, &quot;bab&quot;], the output should be stringsRearrangement(inputArray) = false. There are 6 possible arrangements for these strings: [&quot;aba&quot;, &quot;bbb&quot;, &quot;bab&quot;] [&quot;aba&quot;, &quot;bab&quot;, &quot;bbb&quot;] [&quot;bbb&quot;, &quot;aba&quot;, &quot;bab&quot;] [&quot;bbb&quot;, &quot;bab&quot;, &quot;aba&quot;] [&quot;bab&quot;, &quot;bbb&quot;, &quot;aba&quot;] [&quot;bab&quot;, &quot;aba&quot;, &quot;bbb&quot;] None of these satisfy the condition of consecutive strings differing by 1 character, so the answer is false. For inputArray = [&quot;ab&quot;, &quot;bb&quot;, &quot;aa&quot;], the output should be stringsRearrangement(inputArray) = true. It’s possible to arrange these strings in a way that each consecutive pair of strings differ by 1 character (eg: &quot;aa&quot;, &quot;ab&quot;, &quot;bb&quot; or &quot;bb&quot;, &quot;ab&quot;, &quot;aa&quot;), so return true. Input/Output [execution time limit] 4 seconds (py3) [input] array.string inputArray A non-empty array of strings of lowercase letters. Guaranteed constraints : 2 ≤ inputArray.length ≤ 10, 1 ≤ inputArray[i].length ≤ 15. [output] boolean Return true if the strings can be reordered in such a way that each neighbouring pair of strings differ by exactly one character (false otherwise). Solution1234567891011121314151617from itertools import permutationsdef stringsRearrangement(inputArray): per = list(permutations(inputArray)) for i in per: flag = True for j in range(len(i) - 1): s1 = i[j] s2 = i[j + 1] cnt = 0 for k, l in zip(s1, s2): if k != l: cnt += 1 if cnt != 1: flag = False if flag: return True return False","link":"/2020/03/09/CodeSignal-33-stringsRearrangement/"},{"title":"[CodeSignal] #35 firstDigit","text":"DescriptionFind the leftmost digit that occurs in a given string. Example For inputString = &quot;var_1__Int&quot;, the output should be firstDigit(inputString) = '1'; For inputString = &quot;q2q-q&quot;, the output should be firstDigit(inputString) = '2'; For inputString = &quot;0ss&quot;, the output should be firstDigit(inputString) = '0'. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string containing at least one digit. Guaranteed constraints : 3 ≤ inputString.length ≤ 10. [output] char Solution1234def firstDigit(inputString): for i in inputString: if '0' &lt;= i &lt;= '9': return i","link":"/2020/03/09/CodeSignal-35-firstDigit/"},{"title":"[CodeSignal] #34 extractEachKth","text":"DescriptionGiven array of integers, remove each kth element from it. ExampleFor inputArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and k = 3, the output should be extractEachKth(inputArray, k) = [1, 2, 4, 5, 7, 8, 10]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Guaranteed constraints : 5 ≤ inputArray.length ≤ 15, -20 ≤ inputArray[i] ≤ 20. [input] integer k Guaranteed constraints : 1 ≤ k ≤ 10. [output] array.integer inputArray without elements k - 1, 2k - 1, 3k - 1 etc. Solution12345678def extractEachKth(inputArray, k): for i in range(k, len(inputArray) + 1, k): inputArray[i - 1] = 999 result = [] for i in inputArray: if i != 999: result.append(i) return result","link":"/2020/03/09/CodeSignal-34-extractEachKth/"},{"title":"[CodeSignal] #36 differentSymbolsNaive","text":"DescriptionGiven a string, find the number of different characters in it. ExampleFor s = &quot;cabca&quot;, the output should be differentSymbolsNaive(s) = 3. There are 3 different characters a, b and c. Input/Output [execution time limit] 4 seconds (py3) [input] string s A string of lowercase English letters. Guaranteed constraints : 3 ≤ s.length ≤ 1000. [output] integer Solution12def differentSymbolsNaive(s): return len(set(list(s)))","link":"/2020/03/09/CodeSignal-36-differentSymbolsNaive/"},{"title":"[CodeSignal] #37 arrayMaxConsecutiveSum","text":"DescriptionGiven array of integers, find the maximal possible sum of some of its k consecutive elements. ExampleFor inputArray = [2, 3, 5, 1, 6] and k = 2, the output should be arrayMaxConsecutiveSum(inputArray, k) = 8. All possible sums of 2 consecutive elements are: 2 + 3 = 5; 3 + 5 = 8; 5 + 1 = 6; 1 + 6 = 7.Thus, the answer is 8. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Array of positive integers. Guaranteed constraints : 3 ≤ inputArray.length ≤ 105, 1 ≤ inputArray[i] ≤ 1000. [input] integer k An integer (not greater than the length of inputArray). Guaranteed constraints : 1 ≤ k ≤ inputArray.length. [output] integer The maximal possible sum. Solution123456789def arrayMaxConsecutiveSum(inputArray, k): dp = [0 for _ in range(len(inputArray) + 1)] result = [0 for _ in range(len(inputArray))] dp[0] = inputArray[0] for i in range(1, len(inputArray)): dp[i] = dp[i - 1] + inputArray[i] for i in range(len(inputArray)): result[i] = dp[i] - dp[i - k] return max(result)","link":"/2020/03/09/CodeSignal-37-arrayMaxConsecutiveSum/"},{"title":"[CodeSignal] #38 growingPlant","text":"DescriptionCaring for a plant can be hard work, but since you tend to it regularly, you have a plant that grows consistently. Each day, its height increases by a fixed amount represented by the integer upSpeed. But due to lack of sunlight, the plant decreases in height every night, by an amount represented by downSpeed. Since you grew the plant from a seed, it started at height 0 initially. Given an integer desiredHeight, your task is to find how many days it’ll take for the plant to reach this height. ExampleFor upSpeed = 100, downSpeed = 10, and desiredHeight = 910, the output should be growingPlant(upSpeed, downSpeed, desiredHeight) = 10. The plant first reaches a height of 910 on day 10. Input/Output [execution time limit] 4 seconds (py3) [input] integer upSpeed A positive integer representing the daily growth of the plant. Guaranteed constraints : 3 ≤ upSpeed ≤ 100. [input] integer downSpeed A positive integer representing the nightly decline of the plant. Guaranteed constraints : 2 ≤ downSpeed &lt; upSpeed. [input] integer desiredHeight A positive integer representing the goal height. Guaranteed constraints : 4 ≤ desiredHeight ≤ 1000. [output] integer The number of days that it will take for the plant to reach / pass desiredHeight. Solution12345678910def growingPlant(upSpeed, downSpeed, desiredHeight): plant = 0 result = 0 while True: result += 1 plant += upSpeed if plant &gt;= desiredHeight: break plant -= downSpeed return result","link":"/2020/03/09/CodeSignal-38-growingPlant/"},{"title":"[CodeSignal] #39 Knapsack Light","text":"DescriptionYou found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW and you can’t come back for the items later? Note: that there are only two items and you can’t bring more than one item of each type, i.e. you can’t take two first items or two second items. Example For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4, and maxW = 8, the output should be knapsackLight(value1, weight1, value2, weight2, maxW) = 10. You can only carry the first item. For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4, and maxW = 9, the output should be knapsackLight(value1, weight1, value2, weight2, maxW) = 16. You’re strong enough to take both of the items with you. For value1 = 5, weight1 = 3, value2 = 7, weight2 = 4, and maxW = 6, the output should be knapsackLight(value1, weight1, value2, weight2, maxW) = 7. You can’t take both items, but you can take any of them. Input/Output [execution time limit] 4 seconds (py3) [input] integer value1 Guaranteed constraints : 2 ≤ value1 ≤ 20. [input] integer weight1 Guaranteed constraints : 2 ≤ weight1 ≤ 10. [input] integer value2 Guaranteed constraints : 2 ≤ value2 ≤ 20. [input] integer weight2 Guaranteed constraints : 2 ≤ weight2 ≤ 10. [input] integer maxW Guaranteed constraints : 1 ≤ maxW ≤ 20. [output] integer Solution123456789def knapsackLight(value1, weight1, value2, weight2, maxW): result = 0 v = [[value1, weight1], [value2, weight2]] v.sort(key=lambda x:x[0], reverse=True) for i in v: if maxW &gt;= i[1]: result += i[0] maxW -= i[1] return result","link":"/2020/03/10/CodeSignal-39-Knapsack-Light/"},{"title":"[CodeSignal] #41 digitDegree","text":"DescriptionLet’s define digit degree of some positive integer as the number of times we need to replace this number with the sum of its digits until we get to a one digit number. Given an integer, find its digit degree. Example For n = 5, the output should be digitDegree(n) = 0; For n = 100, the output should be digitDegree(n) = 1. For n = 91, the output should be digitDegree(n) = 2.9 + 1 = 10 -&gt; 1 + 0 = 1. Input/Output [execution time limit] 4 seconds (py3) [input] integer n Guaranteed constraints : 5 ≤ n ≤ 109. [output] integer Solution123456789def digitDegree(n): cnt = 0 while len(str(n)) != 1: cnt += 1 temp = 0 for i in str(n): temp += int(i) n = temp return cnt","link":"/2020/03/10/CodeSignal-41-digitDegree/"},{"title":"[CodeSignal] #40 longestDigitsPrefix","text":"DescriptionGiven a string, output its longest prefix1 which contains only digits. ExampleFor inputString = &quot;123aa1&quot;, the output should be longestDigitsPrefix(inputString) = &quot;123&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString Guaranteed constraints : 3 ≤ inputString.length ≤ 100. [output] string Solution1234567891011def longestDigitsPrefix(inputString): result = '' if '0' &lt;= inputString[0] &lt;= '9': for i in range(len(inputString)): if '0' &lt;= inputString[i] &lt;= '9': result += inputString[i] else: break return result else: return result 1. A substring of a string is called a prefix if it starts at the string’s first character.","link":"/2020/03/10/CodeSignal-40-longestDigitsPrefix/"},{"title":"[CodeSignal] #42 Bishop and Pawn","text":"DescriptionGiven the positions of a white bishop and a black pawn on the standard chess board, determine whether the bishop can capture the pawn in one move. The bishop has no restrictions in distance for each move, but is limited to diagonal movement. Check out the example below to see how it can move: Example For bishop = &quot;a1&quot; and pawn = &quot;c3&quot;, the output should be bishopAndPawn(bishop, pawn) = true. For bishop = &quot;h1&quot; and pawn = &quot;h3&quot;, the output should be bishopAndPawn(bishop, pawn) = false. Input/Output [execution time limit] 4 seconds (py3) [input] string bishop Coordinates of the white bishop in the chess notation1. Guaranteed constraints : bishop.length = 2, 'a' ≤ bishop[0] ≤ 'h', 1 ≤ bishop[1] ≤ 8. [input] string pawn Coordinates of the black pawn in the same notation. Guaranteed constraints : pawn.length = 2, 'a' ≤ pawn[0] ≤ 'h', 1 ≤ pawn[1] ≤ 8. [output] boolean true if the bishop can capture the pawn, false otherwise. Solution12345678def bishopAndPawn(bishop, pawn): if bishop[0] == pawn[0] or bishop[1] == pawn[1]: return False else: if abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1])): return True else: return False 1. Each square of the chessboard is identified by a unique coordinate pair—a letter and a number. The vertical columns of squares from white’s left to the right are labeled ‘a’ through ‘h’. The horizontal rows of squares are numbered 1 to 8 starting from white’s side of the board. Thus each square has a unique identification as a string consisting of two characters: the first is the column label, and the second in the row number.","link":"/2020/03/10/CodeSignal-42-Bishop-and-Pawn/"},{"title":"[CodeSignal] #45 buildPalindrome","text":"DescriptionGiven a string, find the shortest possible string which can be achieved by adding characters to the end of initial string to make it a palindrome1. Example For st = &quot;abcdc&quot;, the output should be buildPalindrome(st) = &quot;abcdcba&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string st A string consisting of lowercase English letters. Guaranteed constraints : 3 ≤ st.length ≤ 10. [output] string Solution123456789101112131415def buildPalindrome(st): if st == st[::-1]: return st else: cursor = 1 temp = st while True: s = st[:cursor] temp += s[::-1] if temp == temp[::-1]: break else: temp = temp[:-cursor] cursor += 1 return temp 1. A palindrome is a string that reads the same left-to-right and right-to-left.","link":"/2020/03/10/CodeSignal-45-buildPalindrome/"},{"title":"[CodeSignal] #43 isBeautifulString","text":"DescriptionA string is said to be beautiful if each letter in the string appears at most as many times as the previous letter in the alphabet within the string; ie: b occurs no more times than a; c occurs no more times than b; etc. Given a string, check whether it is beautiful. Example For inputString = &quot;bbbaacdafe&quot;, the output should be isBeautifulString(inputString) = true. This string contains 3 as, 3 bs, 1 c, 1 d, 1 e, and 1 f (and 0 of every other letter), so since there aren’t any letters that appear more frequently than the previous letter, this string qualifies as beautiful. For inputString = &quot;aabbb&quot;, the output should be isBeautifulString(inputString) = false. Since there are more bs than as, this string is not beautiful. For inputString = &quot;bbc&quot;, the output should be isBeautifulString(inputString) = false. Although there are more bs than cs, this string is not beautiful because there are no as, so therefore there are more bs than as. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string of lowercase English letters. Guaranteed constraints : 3 ≤ inputString.length ≤ 50. [output] boolean Return true if the string is beautiful, false otherwise. Solution12345678910111213def isBeautifulString(inputString): check = [0 for _ in range(26)] for i in inputString: check[ord(i) - ord('a')] += 1 flag = True for i in range(25): if check[i] &lt; check[i+1]: flag = False break if flag: return True else: return False","link":"/2020/03/10/CodeSignal-43-isBeautifulString/"},{"title":"[CodeSignal] #44 Find Email Domain","text":"DescriptionAn email address such as &quot;John.Smith@example.com&quot; is made up of a local part (&quot;John.Smith&quot;), an &quot;@&quot; symbol, then a domain part (&quot;example.com&quot;). The domain name part of an email address may only consist of letters, digits, hyphens and dots. The local part, however, also allows a lot of different special characters. Here you can look at several examples of correct and incorrect email addresses. Given a valid email address, find its domain part. Example For address = &quot;prettyandsimple@example.com&quot;, the output should be findEmailDomain(address) = &quot;example.com&quot;; For address = &quot;fully-qualified-domain@codesignal.com&quot;, the output should be findEmailDomain(address) = &quot;codesignal.com&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string address A string of lowercase English letters. Guaranteed constraints : 10 ≤ address.length ≤ 50. [output] string Solution12def findEmailDomain(address): return address.split('@')[-1]","link":"/2020/03/10/CodeSignal-44-Find-Email-Domain/"},{"title":"[CodeSignal] #46 Elections Winners","text":"DescriptionElections are in progress! Given an array of the numbers of votes given to each of the candidates so far, and an integer k equal to the number of voters who haven’t cast their vote yet, find the number of candidates who still have a chance to win the election. The winner of the election must secure strictly more votes than any other candidate. If two or more candidates receive the same (maximum) number of votes, assume there is no winner at all. ExampleFor votes = [2, 3, 5, 2] and k = 3, the output should be electionsWinners(votes, k) = 2. The first candidate got 2 votes. Even if all of the remaining 3 candidates vote for him, he will still have only 5 votes, i.e. the same number as the third candidate, so there will be no winner. The second candidate can win if all the remaining candidates vote for him (3 + 3 = 6 &gt; 5). The third candidate can win even if none of the remaining candidates vote for him. For example, if each of the remaining voters cast their votes for each of his opponents, he will still be the winner (the votes array will thus be [3, 4, 5, 3]). The last candidate can’t win no matter what (for the same reason as the first candidate). Thus, only 2 candidates can win (the second and the third), which is the answer. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer votes A non-empty array of non-negative integers. Its ith element denotes the number of votes cast for the ith candidate. Guaranteed constraints : 4 ≤ votes.length ≤ 105, 0 ≤ votes[i] ≤ 104. [input] integer k The number of voters who haven’t cast their vote yet. Guaranteed constraints : 0 ≤ k ≤ 105. [output] integer Solution12345678910111213141516def electionsWinners(votes, k): result = 0 same = 0 m = max(votes) for i in votes: if i + k &gt; m: result += 1 if i == m: same += 1 if result == 0: if same &gt; 1: return 0 else: return 1 else: return result","link":"/2020/03/10/CodeSignal-46-Elections-Winners/"},{"title":"[CodeSignal] #49 lineEncoding","text":"DescriptionGiven a string, return its encoding defined as follows: First, the string is divided into the least possible number of disjoint substrings consisting of identical characters for example, &quot;aabbbc&quot; is divided into [&quot;aa&quot;, &quot;bbb&quot;, &quot;c&quot;] Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character for example, substring &quot;bbb&quot; is replaced by &quot;3b&quot; Finally, all the new strings are concatenated together in the same order and a new string is returned. ExampleFor s = &quot;aabbbc&quot;, the output should be lineEncoding(s) = &quot;2a3bc&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string s String consisting of lowercase English letters. Guaranteed constraints : 4 ≤ s.length ≤ 15. [output] string Encoded version of s. Solution12345678910111213141516171819def lineEncoding(s): result = '' cnt = 1 temp = s[0] for i in s[1:]: if temp == i: cnt += 1 else: if cnt == 1: result += temp else: result += str(cnt) + temp cnt = 1 temp = i if cnt == 1: result += temp else: result += str(cnt) + temp return result","link":"/2020/03/10/CodeSignal-49-lineEncoding/"},{"title":"[CodeSignal] #48 isDigit","text":"DescriptionDetermine if the given character is a digit or not. Example For symbol = '0', the output should be isDigit(symbol) = true; For symbol = '-', the output should be isDigit(symbol) = false. Input/Output [execution time limit] 4 seconds (py3) [input] char symbol A character which is either a digit or not. Guaranteed constraints : Given symbol is from ASCII table. [output] boolean true if symbol is a digit, false otherwise. Solution12def isDigit(symbol): return symbol.isdigit()","link":"/2020/03/10/CodeSignal-48-isDigit/"},{"title":"[CodeSignal] #50 chessKnight","text":"DescriptionGiven a position of a knight on the standard chessboard, find the number of different moves the knight can perform. The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares. Example For cell = &quot;a1&quot;, the output should be chessKnight(cell) = 2. For cell = &quot;c2&quot;, the output should be chessKnight(cell) = 6. Input/Output [execution time limit] 4 seconds (py3) [input] string cell String consisting of 2 letters - coordinates of the knight on an 8 × 8 chessboard in chess notation1. Guaranteed constraints : cell.length = 2, 'a' ≤ cell[0] ≤ 'h', 1 ≤ cell[1] ≤ 8. [output] integer Solution123456789101112dy = [-1, -2, -2, -1, 1, 2, 2, 1]dx = [-2, -1, 1, 2, 2, 1, -1, -2]def chessKnight(cell): x = ord(cell[0]) - ord('a') y = int(cell[1]) - 1 result = 0 for i in range(8): nx = x + dx[i] ny = y + dy[i] if 0 &lt;= nx &lt;= 7 and 0 &lt;= ny &lt;= 7: result += 1 return result 1. Each square of the chessboard is identified by a unique coordinate pair—a letter and a number. The vertical columns of squares from white’s left to the right are labeled ‘a’ through ‘h’. The horizontal rows of squares are numbered 1 to 8 starting from white’s side of the board. Thus each square has a unique identification as a string consisting of two characters: the first is the column label, and the second in the row number.","link":"/2020/03/10/CodeSignal-50-chessKnight/"},{"title":"[CodeSignal] #47 Is MAC48 Address?","text":"DescriptionA media access control address (MAC address) is a unique identifier assigned to network interfaces for communications on the physical network segment. The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by hyphens (e.g. 01-23-45-67-89-AB). Your task is to check by given string inputString whether it corresponds to MAC-48 address or not. Example For inputString = &quot;00-1B-63-84-45-E6&quot;, the output should be isMAC48Address(inputString) = true; For inputString = &quot;Z1-1B-63-84-45-E6&quot;, the output should be isMAC48Address(inputString) = false; For inputString = &quot;not a MAC-48 address&quot;, the output should be isMAC48Address(inputString) = false. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString Guaranteed constraints : 15 ≤ inputString.length ≤ 20. [output] boolean true if inputString corresponds to MAC-48 address naming rules, false otherwise. Solution12345678910111213def isMAC48Address(inputString): l = list(inputString.split('-')) if len(l) != 6: return False for i in l: if len(i) != 2: return False for j in i: if '0' &lt;= j &lt;= '9' or 'A' &lt;= j &lt;= 'F': continue else: return False return True","link":"/2020/03/10/CodeSignal-47-Is-MAC48-Address/"},{"title":"[CodeSignal] #51 deleteDigit","text":"DescriptionGiven some integer, find the maximal number you can obtain by deleting exactly one digit of the given number. Example For n = 152, the output should be deleteDigit(n) = 52; For n = 1001, the output should be deleteDigit(n) = 101. Input/Output [execution time limit] 4 seconds (py3) [input] integer n Guaranteed constraints : 10 ≤ n ≤ 106. [output] integer Solution12345678def deleteDigit(n): result = 0 l = list(str(n)) for i in range(len(l)): c = l.copy() c.pop(i) result = max(result, int(''.join(c))) return result","link":"/2020/03/10/CodeSignal-51-deleteDigit/"},{"title":"[CodeSignal] #52 longestWord","text":"DescriptionDefine a word as a sequence of consecutive English letters. Find the longest word from the given string. ExampleFor text = &quot;Ready, steady, go!&quot;, the output should be longestWord(text) = &quot;steady&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string text Guaranteed constraints : 4 ≤ text.length ≤ 50. [output] string The longest word from text. It’s guaranteed that there is a unique output. Solution12345678910111213def longestWord(text): result = '' temp = '' for i in text: if 'a' &lt;= i &lt;= 'z' or 'A' &lt;= i &lt;= 'Z': temp += i else: if len(result) &lt; len(temp): result = temp temp = '' if len(result) &lt; len(temp): result = temp return result","link":"/2020/03/10/CodeSignal-52-longestWord/"},{"title":"[CodeSignal] #56 digitsProduct","text":"DescriptionGiven an integer product, find the smallest positive (i.e. greater than 0) integer the product of whose digits is equal to product. If there is no such integer, return -1 instead. Example For product = 12, the output should be digitsProduct(product) = 26; For product = 19, the output should be digitsProduct(product) = -1. Input/Output [execution time limit] 4 seconds (py3) [input] integer product Guaranteed constraints : 0 ≤ product ≤ 600. [output] integer Solution12345678910111213def digitsProduct(product): cursor = 1 while True: s = str(cursor) temp = int(s[0]) for i in s[1:]: temp *= int(i) if temp == product: return cursor if cursor &gt; 3559: break cursor += 1 return -1","link":"/2020/03/11/CodeSignal-56-digitsProduct/"},{"title":"[CodeSignal] #54 sumUpNumbers","text":"DescriptionCodeMaster has just returned from shopping. He scanned the check of the items he bought and gave the resulting string to Ratiorg to figure out the total number of purchased items. Since Ratiorg is a bot he is definitely going to automate it, so he needs a program that sums up all the numbers which appear in the given input. Help Ratiorg by writing a function that returns the sum of numbers that appear in the given inputString. ExampleFor inputString = &quot;2 apples, 12 oranges&quot;, the output should be sumUpNumbers(inputString) = 14. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString Guaranteed constraints : 0 ≤ inputString.length ≤ 105. [output] integer Solution1234567import redef sumUpNumbers(inputString): arr = re.findall('[0-9]+', inputString) result = 0 for i in arr: result += int(i) return result","link":"/2020/03/11/CodeSignal-54-sumUpNumbers/"},{"title":"[CodeSignal] #55 Different Squares","text":"DescriptionGiven a rectangular matrix containing only digits, calculate the number of different 2 × 2 squares in it. ExampleFor 12345matrix = [[1, 2, 1], [2, 2, 2], [2, 2, 2], [1, 2, 3], [2, 2, 1]] the output should be differentSquares(matrix) = 6. Here are all 6 different 2 × 2 squares: 1 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 3 2 3 2 1 Input/Output [execution time limit] 4 seconds (py3) [input] array.array.integer matrix Guaranteed constraints : 1 ≤ matrix.length ≤ 100, 1 ≤ matrix[i].length ≤ 100, 0 ≤ matrix[i][j] ≤ 9. [output] integer The number of different 2 × 2 squares in matrix. Solution1234567def differentSquares(matrix): result = set() for i in range(len(matrix)-1): for j in range(len(matrix[0])-1): temp = str(matrix[i][j]) + str(matrix[i][j+1]) + str(matrix[i+1][j]) + str(matrix[i+1][j+1]) result.add(temp) return len(result)","link":"/2020/03/11/CodeSignal-55-Different-Squares/"},{"title":"[CodeSignal] #53 Valid Time","text":"DescriptionCheck if the given string is a correct time representation of the 24-hour clock. Example For time = &quot;13:58&quot;, the output should be validTime(time) = true; For time = &quot;25:51&quot;, the output should be validTime(time) = false; For time = &quot;02:76&quot;, the output should be validTime(time) = false. Input/Output [execution time limit] 4 seconds (py3) [input] string time A string representing time in HH:MM format. It is guaranteed that the first two characters, as well as the last two characters, are digits. [output] boolean true if the given representation is correct, false otherwise. Solution1234567891011def validTime(time): flag = True if 0 &lt;= int(time.split(':')[0]) &lt;= 23: pass else: flag = False if 0 &lt;= int(time.split(':')[1]) &lt;= 59: pass else: flag = False return flag","link":"/2020/03/11/CodeSignal-53-Valid-Time/"}],"tags":[],"categories":[{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"CodeSignal","slug":"Algorithm/CodeSignal","link":"/categories/Algorithm/CodeSignal/"}]}