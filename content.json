{"pages":[{"title":"About Cuws","text":"Intro.안녕하세요.","link":"/about/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"},{"title":"all-categories","text":"","link":"/all-categories/index.html"}],"posts":[{"title":"[CodeSignal] #1 add","text":"DescriptionWrite a function that returns the sum of two numbers. ExampleFor param1 = 1 and param2 = 2, the output should be add(param1, param2) = 3. Input/Output [execution time limit] 4 seconds (py3) [input] integer param1 Guaranteed constraints : -1000 ≤ param1 ≤ 1000. [input] integer param2 Guaranteed constraints : -1000 ≤ param2 ≤ 1000. [output] integer The sum of the two inputs. Solution12def add(param1, param2): return param1 + param2","link":"/2020/02/28/CodeSignal-1-add/"},{"title":"[CodeSignal] #11 isLucky","text":"DescriptionTicket numbers usually consist of an even number of digits. A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half. Given a ticket number n, determine if it’s lucky or not. Example For n = 1230, the output should be isLucky(n) = true; For n = 239017, the output should be isLucky(n) = false. Input/Output [execution time limit] 4 seconds (py3) [input] integer n A ticket number represented as a positive integer with an even number of digits. Guaranteed constraints : 10 ≤ n &lt; 106. [output] boolean true if n is a lucky ticket number, false otherwise. Solution12345678def isLucky(n): n = str(n) result1 = result2 = 0 for i in n[:len(n)//2]: result1 += int(i) for i in n[len(n)//2:]: result2 += int(i) return result1 == result2","link":"/2020/03/07/CodeSignal-11-isLucky/"},{"title":"[CodeSignal] #13 reverseInParentheses","text":"DescriptionWrite a function that reverses characters in (possibly nested) parentheses in the input string. Input strings will always be well-formed with matching ()s. Example For inputString = &quot;(bar)&quot;, the output should be reverseInParentheses(inputString) = &quot;rab&quot;; For inputString = &quot;foo(bar)baz&quot;, the output should be reverseInParentheses(inputString) = &quot;foorabbaz&quot;; For inputString = &quot;foo(bar)baz(blim)&quot;, the output should be reverseInParentheses(inputString) = &quot;foorabbazmilb&quot;; For inputString = &quot;foo(bar(baz))blim&quot;, the output should be reverseInParentheses(inputString) = &quot;foobazrabblim&quot;. Because &quot;foo(bar(baz))blim&quot; becomes &quot;foo(barzab)blim&quot; and then &quot;foobazrabblim&quot;. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string consisting of lowercase English letters and the characters ( and ). It is guaranteed that all parentheses in inputString form a regular bracket sequence1. Guaranteed constraints : 0 ≤ inputString.length ≤ 50. [output] string Return inputString, with all the characters that were in parentheses reversed. Solution1234567891011121314def reverseInParentheses(inputString): result = [] for i in inputString: if i != ')': result.append(i) else: temp = [] while result[-1] != '(': temp.append(result[-1]) result.pop(-1) result.pop(-1) for j in temp: result.append(j) return ''.join(result) 1. A bracket sequence is called regular if it is possible to insert some numbers and signs into the sequence in such a way that the new sequence will represent a correct arithmetic expression.","link":"/2020/03/07/CodeSignal-13-reverseInParentheses/"},{"title":"[CodeSignal] #14 alternatingSums","text":"DescriptionSeveral people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on. You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete. ExampleFor a = [50, 60, 60, 45, 70], the output should be alternatingSums(a) = [180, 105]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a Guaranteed constraints : 1 ≤ a.length ≤ 105, 45 ≤ a[i] ≤ 100. [output] array.integer Solution12345678def alternatingSums(a): result = [0, 0] for i in range(len(a)): if i % 2 == 0: result[0] += a[i] else: result[1] += a[i] return result","link":"/2020/03/07/CodeSignal-14-alternatingSums/"},{"title":"[CodeSignal] #15 Add Border","text":"DescriptionGiven a rectangular matrix of characters, add a border of asterisks(*) to it. ExampleFor 12picture = [&quot;abc&quot;, &quot;ded&quot;] the output should be 1234addBorder(picture) = [&quot;*****&quot;, &quot;*abc*&quot;, &quot;*ded*&quot;, &quot;*****&quot;] Input/Output [execution time limit] 4 seconds (py3) [input] array.string picture A non-empty array of non-empty equal-length strings. Guaranteed constraints : 1 ≤ picture.length ≤ 100, 1 ≤ picture[i].length ≤ 100. [output] array.string The same matrix of characters, framed with a border of asterisks of width 1. Solution123456789def addBorder(picture): result = [] for i in range(len(picture) + 2): if i == 0 or i == len(picture) + 1: temp = '*' * (len(picture[0]) + 2) result.append(temp) else: result.append('*' + picture[i-1] + '*') return result","link":"/2020/03/08/CodeSignal-15-Add-Border/"},{"title":"[CodeSignal] #10 commonCharacterCount","text":"DescriptionGiven two strings, find the number of common characters between them. ExampleFor s1 = &quot;aabcc&quot; and s2 = &quot;adcaa&quot;, the output should be commonCharacterCount(s1, s2) = 3. Strings have 3 common characters - 2 “a”s and 1 “c”. Input/Output [execution time limit] 4 seconds (py3) [input] string s1 A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ s1.length &lt; 15. [input] string s2 A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ s2.length &lt; 15. [output] integer Solution123456789101112def commonCharacterCount(s1, s2): check1 = [0 for _ in range(26)] check2 = [0 for _ in range(26)] for i in s1: check1[ord(i) - ord('a')] += 1 for i in s2: check2[ord(i) - ord('a')] += 1 answer = 0 for i, j in zip(check1, check2): if i != 0 and j != 0: answer += min(i, j) return answer","link":"/2020/03/05/CodeSignal-10-commonCharacterCount/"},{"title":"[CodeSignal] #12 sortByHeight","text":"DescriptionSome people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall! ExampleFor a = [-1, 150, 190, 170, -1, -1, 160, 180], the output should be sortByHeight(a) = [-1, 150, 160, 170, -1, -1, 180, 190]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position. Guaranteed constraints : 1 ≤ a.length ≤ 1000, -1 ≤ a[i] ≤ 1000. [output] array.integer Sorted array a with all the trees untouched. Solution1234567891011121314151617def sortByHeight(a): arr = [] tree = [] for i in range(len(a)): if a[i] == -1: tree.append(i) else: arr.append(a[i]) arr.sort() result = [] for i in range(len(a)): if i in tree: result.append(-1) else: result.append(arr[0]) arr.pop(0) return result","link":"/2020/03/07/CodeSignal-12-sortByHeight/"},{"title":"[CodeSignal] #16 Are Similar?","text":"DescriptionTwo arrays are called similar if one can be obtained from another by swapping at most one pair of elements in one of the arrays. Given two arrays a and b, check whether they are similar. Example For a = [1, 2, 3] and b = [1, 2, 3], the output should be areSimilar(a, b) = true. The arrays are equal, no need to swap any elements. For a = [1, 2, 3] and b = [2, 1, 3], the output should be areSimilar(a, b) = true. We can obtain b from a by swapping 2 and 1 in b. For a = [1, 2, 2] and b = [2, 1, 1], the output should be areSimilar(a, b) = false. Any swap of any two elements either in a or in b won’t make a and b equal. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer a Array of integers. Guaranteed constraints : 3 ≤ a.length ≤ 105, 1 ≤ a[i] ≤ 1000. [input] array.integer b Array of integers of the same length as a. Guaranteed constraints : b.length = a.length, 1 ≤ b[i] ≤ 1000. [output] boolean true if a and b are similar, false otherwise. Solution12345678910def areSimilar(a, b): if sorted(a) != sorted(b): return False flag = 0 for i, j in zip(a, b): if i != j: flag += 1 if flag &gt; 2: return False return True","link":"/2020/03/08/CodeSignal-16-Are-Similar/"},{"title":"[CodeSignal] #2 centuryFromYear","text":"DescriptionGiven a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc. Example For year = 1905, the output should be centuryFromYear(year) = 20; For year = 1700, the output should be centuryFromYear(year) = 17. Input/Output [execution time limit] 4 seconds (py3) [input] integer year A positive integer, designating the year. Guaranteed constraints : 1 ≤ year ≤ 2005. [output] integer The number of the century the year is in. Solution123import mathdef centuryFromYear(year): return math.ceil(year / 100)","link":"/2020/02/28/CodeSignal-2-centuryFromYear/"},{"title":"[CodeSignal] #3 checkPalindrome","text":"DescriptionGiven the string, check if it is a palindrome1. Example For inputString = &quot;aabaa&quot;, the output should be checkPalindrome(inputString) = true; For inputString = &quot;abac&quot;, the output should be checkPalindrome(inputString) = false; For inputString = &quot;a&quot;, the output should be checkPalindrome(inputString) = true. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A non-empty string consisting of lowercase characters. Guaranteed constraints : 1 ≤ inputString.length ≤ 105. [output] boolean true if inputString is palindrome, false otherwise. Solution12def checkPalindrome(inputString): return inputString == inputString[::-1] #[::-1]은 문자열을 뒤집어 준다. 1. A palindrome is a string that reads the same left-to-right and right-to-left.","link":"/2020/02/28/CodeSignal-3-checkPalindrome/"},{"title":"[CodeSignal] #4 adjacentElementsProduct","text":"DescriptionGiven an array of integers, find the pair of adjacent elements that has the largest product and return that product. ExampleFor inputArray = [3, 6, -2, -5, 7, 3], the output should be adjacentElementsProduct(inputArray) = 21. 7 and 3 produce the largest product. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray An array of integers containing at least two elements. Guaranteed constraints : 2 ≤ inputArray.length ≤ 10, -1000 ≤ inputArray[i] ≤ 1000. [output] integer The largest product of adjacent elements. Solution123456def adjacentElementsProduct(inputArray): m = -2222 for i in range(1, len(inputArray)): if m &lt; inputArray[i-1] * inputArray[i]: m = inputArray[i-1] * inputArray[i] return m","link":"/2020/03/02/CodeSignal-4-adjacentElementsProduct/"},{"title":"[CodeSignal] #5 shapeArea","text":"DescriptionBelow we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n. A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below. ExampleFor n = 2, the output should be shapeArea(n) = 5. For n = 3, the output should be shapeArea(n) = 13. Input/Output [execution time limit] 4 seconds (py3) [input] integer n Guaranteed constraints : 1 ≤ n &lt; 104. [output] integer The area of the n-interesting polygon. Solution123456def shapeArea(n): result = 1 add = 4 for i in range(1, n): result += add * i return result","link":"/2020/03/02/CodeSignal-5-shapeArea/"},{"title":"[CodeSignal] #7 almostIncreasingSequence","text":"DescriptionGiven a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array. Note: sequence a0, a1, …, an is considered to be a strictly increasing if a0 &lt; a1 &lt; … &lt; an. Sequence containing only one element is also considered to be strictly increasing. ExampleFor sequence = [1, 3, 2, 1], the output should be almostIncreasingSequence(sequence) = false. There is no one element in this array that can be removed in order to get a strictly increasing sequence. For sequence = [1, 3, 2], the output should be almostIncreasingSequence(sequence) = true. You can remove 3 from the array to get the strictly increasing sequence [1, 2]. Alternately, you can remove 2 to get the strictly increasing sequence [1, 3]. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer sequence Guaranteed constraints : 2 ≤ sequence.length ≤ 105, -105 ≤ sequence[i] ≤ 105. [output] boolean Return true if it is possible to remove one element from the array in order to get a strictly increasing sequence, otherwise return false. Solution123456789101112def almostIncreasingSequence(sequence): ans = 0 for i in range(len(sequence) - 1): if sequence[i] &gt;= sequence[i + 1]: ans += 1 if i &gt;= 1 and sequence[i + 1] &lt;= sequence[i - 1]: if len(sequence) - 2 &gt; i and sequence[i] &gt;= sequence[i + 2]: ans += 1 if ans &gt; 1: return False else: return True","link":"/2020/03/03/CodeSignal-7-almostIncreasingSequence/"},{"title":"[CodeSignal] #6 Make Array Consecutive 2","text":"DescriptionRatiorg got statues of different sizes as a present from CodeMaster for his birthday, each statue having an non-negative integer size. Since he likes to make things perfect, he wants to arrange them from smallest to largest so that each statue will be bigger than the previous one exactly by 1. He may need some additional statues to be able to accomplish that. Help him figure out the minimum number of additional statues needed. ExampleFor statues = [6, 2, 3, 8], the output should be makeArrayConsecutive2(statues) = 3. Ratiorg needs statues of sizes 4, 5 and 7. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer statues An array of distinct non-negative integers. Guaranteed constraints : 1 ≤ statues.length ≤ 10, 0 ≤ statues[i] ≤ 20. [output] integer The minimal number of statues that need to be added to existing statues such that it contains every integer size from an interval [L, R] (for some L, R) and no other sizes. Solution12345678910def makeArrayConsecutive2(statues): statues.sort() check = [0 for _ in range(statues[-1]+1)] for i in statues: check[i] = 1 answer = 0 for i in range(statues[0], statues[-1]+1): if check[i] != 1: answer += 1 return answer","link":"/2020/03/03/CodeSignal-6-Make-Array-Consecutive-2/"},{"title":"[CodeSignal] #8 matrixElementsSum","text":"DescriptionAfter becoming famous, the CodeBots decided to move into a new building together. Each of the rooms has a different cost, and some of them are free, but there’s a rumour that all the free rooms are haunted! Since the CodeBots are quite superstitious, they refuse to stay in any of the free rooms, or any of the rooms below any of the free rooms. Given matrix, a rectangular matrix of integers, where each value represents the cost of the room, your task is to return the total sum of all rooms that are suitable for the CodeBots (ie: add up all the values that don’t appear below a 0). Example For matrix = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]] the output should be matrixElementsSum(matrix) = 9. There are several haunted rooms, so we’ll disregard them as well as any rooms beneath them. Thus, the answer is 1 + 5 + 1 + 2 = 9. For matrix = [[1, 1, 1, 0], [0, 5, 0, 1], [2, 1, 3, 10]] the output should be matrixElementsSum(matrix) = 9. Note that the free room in the final column makes the full column unsuitable for bots (not just the room directly beneath it). Thus, the answer is 1 + 1 + 1 + 5 + 1 = 9. Input/Output [execution time limit] 4 seconds (py3) [input] array.array.integer matrix A 2-dimensional array of integers representing the cost of each room in the building. A value of 0 indicates that the room is haunted. Guaranteed constraints : 1 ≤ matrix.length ≤ 5, 1 ≤ matrix[i].length ≤ 5, 0 ≤ matrix[i][j] ≤ 10. [output] integer The total price of all the rooms that are suitable for the CodeBots to live in. Solution123456789def matrixElementsSum(matrix): answer = 0 for i in range(len(matrix[0])): for j in range(len(matrix)): if matrix[j][i] == 0: break else: answer += matrix[j][i] return answer","link":"/2020/03/05/CodeSignal-8-matrixElementsSum/"},{"title":"[CodeSignal] #9 All Longest Strings","text":"DescriptionGiven an array of strings, return another array containing all of its longest strings. ExampleFor inputArray = [&quot;aba&quot;, &quot;aa&quot;, &quot;ad&quot;, &quot;vcd&quot;, &quot;aba&quot;], the output should be allLongestStrings(inputArray) = [&quot;aba&quot;, &quot;vcd&quot;, &quot;aba&quot;]. Input/Output [execution time limit] 4 seconds (py3) [input] array.string inputArray A non-empty array. Guaranteed constraints : 1 ≤ inputArray.length ≤ 10, 1 ≤ inputArray[i].length ≤ 10. [output] array.string Array of the longest strings, stored in the same order as in the inputArray. Solution12345678910def allLongestStrings(inputArray): temp = [] for i in inputArray: temp.append(i) temp.sort(key=lambda x:len(x), reverse=True) result = [] for i in inputArray: if len(i) == len(temp[0]): result.append(i) return result","link":"/2020/03/05/CodeSignal-9-All-Longest-Strings/"},{"title":"[CodeSignal] #18 palindromeRearranging","text":"DescriptionGiven a string, find out if its characters can be rearranged to form a palindrome1. ExampleFor inputString = &quot;aabb&quot;, the output should be palindromeRearranging(inputString) = true. We can rearrange &quot;aabb&quot; to make &quot;abba&quot;, which is a palindrome. Input/Output [execution time limit] 4 seconds (py3) [input] string inputString A string consisting of lowercase English letters. Guaranteed constraints : 1 ≤ inputString.length ≤ 50. [output] boolean true if the characters of the inputString can be rearranged to form a palindrome, false otherwise. Solution1234567891011121314151617181920212223def palindromeRearranging(inputString): check = [0 for _ in range(26)] for i in inputString: check[ord(i) - ord('a')] += 1 if len(inputString) % 2 == 0: flag = False for j in check: if j % 2 == 1: flag = True break if flag: return False else: return True else: cnt = 0 for j in check: if j % 2 == 1: cnt += 1 if cnt &gt; 2: return False else: return True 1. A palindrome is a string that reads the same left-to-right and right-to-left.","link":"/2020/03/08/CodeSignal-18-palindromeRearranging/"},{"title":"[CodeSignal] #17 arrayChange","text":"DescriptionYou are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input. ExampleFor inputArray = [1, 1, 1], the output should be arrayChange(inputArray) = 3. Input/Output [execution time limit] 4 seconds (py3) [input] array.integer inputArray Guaranteed constraints : 3 ≤ inputArray.length ≤ 105, -105 ≤ inputArray[i] ≤ 105. [output] integer The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.It’s guaranteed that for the given test cases the answer always fits signed 32-bit integer type. Solution12345678def arrayChange(inputArray): answer = 0 for i in range(1, len(inputArray)): if inputArray[i] &lt;= inputArray[i-1]: temp = inputArray[i] inputArray[i] += abs(inputArray[i-1] - inputArray[i]) + 1 answer += abs(inputArray[i] - temp) return answer","link":"/2020/03/08/CodeSignal-17-arrayChange/"}],"tags":[],"categories":[{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"CodeSignal","slug":"Algorithm/CodeSignal","link":"/categories/Algorithm/CodeSignal/"}]}